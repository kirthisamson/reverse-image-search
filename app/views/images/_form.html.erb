<%= form_for(@image) do |f| %>
  <% if @image.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@image.errors.count, "error") %> prohibited this image from being saved:</h2>

      <ul>
      <% @image.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>


<label>Image File:</label><br/>
<input type="file" id="imageLoader" name="imageLoader"/>
<canvas id="imageCanvas"></canvas>

  <div class="field">
    <%= f.label :name %><br>
    <%= f.text_field :name %>
  </div>
  <div class="field">
    <%= f.label :signature %><br>
    <%= f.text_field :signature, :id => 'signature' %>
  </div>
  <div class="field">
    <%= f.label :Discription %><br>
    <%= f.text_field :disc %>
  </div>
  <div class="field">
    <%= f.label :Artist %><br>
    <%= f.text_field :artist %>
  </div>
  <div class="field">
    <%= f.label :Historical_Context %><br>
    <%= f.text_field :historical_context %>
  </div>
  <div class="field">
    <%= f.label :Medium %><br>
    <%= f.text_field :medium %>
  </div>
  <div class="field">
    <%= f.label :Dimensions %><br>
    <%= f.text_field :dimensions %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>

<% end %>
<script>
var imageLoader = document.getElementById('imageLoader');
    imageLoader.addEventListener('change', handleImage, false);
var canvas = document.getElementById('imageCanvas');
var ctx = canvas.getContext('2d');

var width = 0;
var height = 0;

function handleImage(e){
    var reader = new FileReader();
    reader.onload = function(event){
        var img = new Image();
        img.onload = function(){
            canvas.width = img.width;
            width = img.width;
            console.log(img.width);
            console.log(width);
            canvas.height = img.height;
            height = img.height;
            ctx.drawImage(img,0,0);
            calculatePoints(height, width);
        }
        img.src = event.target.result;
    }
    reader.readAsDataURL(e.target.files[0]); 
        
}

function calculatePoints(height, width){
  alert("height and width are : " + height +" , "+ width);
  var canvas = document.getElementById('imageCanvas');
  var ctx = canvas.getContext('2d');

  var canWidth = canvas.width;
  var canHeight = canvas.height;

  var splitWidth = canWidth/8;
  var splitHeight = canHeight/8;

console.log(canWidth + " , " +  canHeight +" , "+ splitWidth + " , "+ splitHeight);

  var signature = "color";
for (var rows = splitHeight; rows<canHeight; rows+=splitHeight)
{
  for (var cols = splitWidth; cols<canWidth; cols+=splitWidth)
  {
    console.log(rows +" , " + cols);
    var pixel = ctx.getImageData(rows, cols, 1, 1);
  var pix = pixel.data;

  var i=0;
// Loop over each pixel and invert the color.
//for (var i = 0, n = pix.length; i < n; i += 4) {
  console.log(pix[i  ]);// red
  console.log(pix[i+1  ]);// green
  console.log(pix[i+2  ]);// blue

  signature += pix[i]+''+pix[i+1]+''+pix[i+2];
  }
}
//adding
//color317325302326304305348325576455210475365314305441360213189224341292253235195188186352292192193183180188332292180180180187136303292292191175114295292

//not adding
//color8883146928414982771439581150877614186791401048915592841491881782101471251835450106165116194116911589380141837814414012317811096154555110749439766541041118414676771397163119645811348461015043955545861178714876771394745100484510046439448419160507810484144767713946409447429149419059497946405086791387677139767713961517957496936354378781397677139

//color8883146928414982771439581150877614186791401048915592841491881782101471251835450106165116194116911589380141837814414012317811096154555110749439766541041118414676771397163119645811348461015043955545861178714876771394745100484510046439448419160507810484144767713946409447429149419059497946405086791387677139767713961517957496936354378781397677139


console.log(signature);
var sig_textbox = document.getElementById('signature');
sig_textbox.value = signature;
  // Get the CanvasPixelArray from the given coordinates and dimensions.
  //var imgd = ctx.getImageData(height/2, width/2 , width, height);
  var pixel = ctx.getImageData(canvas.height/4, canvas.width/4, 1, 1);
  var pix = pixel.data;

  var i=0;
// Loop over each pixel and invert the color.
//for (var i = 0, n = pix.length; i < n; i += 4) {
  console.log(pix[i  ]);// red
  console.log(pix[i+1  ]);// green
  console.log(pix[i+2  ]);// blue
  //pix[i+1] = 255 - pix[i+1]; 
  //pix[i+2] = 255 - pix[i+2]; 
  // i+3 is alpha (the fourth element)
//}

}
</script>